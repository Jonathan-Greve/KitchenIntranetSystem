@model PaginatedList<KitchenIntranetSystem.Models.Shopping>
@{
    ViewData["Title"] = "Index";
    var UserNames = ViewBag.UserNames;
    var ChartData = ViewBag.ChartData;
}

<script src="~/js/moment.js"></script>
<script src="~/js/Chart.min.js"></script>
<script src="~/js/utils.js"></script>
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>
<h2>Shopping</h2>

<p>
    <a asp-action="Create">Create New</a>
</p>
<form asp-action="Index" method="get">
    <div class="form-actions no-color">
        <p>
            Find by name: <input type="text" name="SearchString" value="@ViewData["currentFilter"]" />
            <input type="submit" value="Search" class="btn btn-default" /> |
            <a asp-action="Index">Back to Full List</a>
        </p>
    </div>
</form>
<table class="table">
    <thead>
        <tr>
            <th>
                <a asp-action="Index" asp-route-sortOrder="@ViewData["UserSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]" >Users</a>
            </th>
            <th>
                <a asp-action="Index" asp-route-sortOrder="@ViewData["PriceSortParm"]">Price</a>
            </th>
            <th>
                <a asp-action="Index" asp-route-sortOrder="@ViewData["itemBoughtParm"]">Item</a>
            </th>
            <th>
                <a asp-action="Index" asp-route-sortOrder="@ViewData["DateSortParm"]">Date</a>
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.User.FirstName) @Html.DisplayFor(modelItem => item.User.LastName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Price)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ItemBought)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Date)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table>
@{
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
}

<a asp-action="Index"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-page="@(Model.PageIndex - 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @prevDisabled">
    Previous
</a>
<a asp-action="Index"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-page="@(Model.PageIndex + 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @nextDisabled">
    Next
</a>

<div class="container">
  <div class="row">
    <div class="col-md-12">
        <div class="btn btn-group">
            <button id="line" type="button" class="btn btn-primary">Line</button>
            <button id="bar" type="button" class="btn btn-primary">Bar</button>
            <button id="radar" type="button" class="btn btn-primary">Radar</button>
        </div>
        <div class="btn btn-group">
            <button id="thisMonth" type="button" class="btn btn-primary">This Month</button>
            <button id="lastMonth" type="button" class="btn btn-primary">Last Month</button>
            <button id="lastThreeMonths" type="button" class="btn btn-primary">Last 3 Months</button>
            <button id="lastSixMonths" type="button" class="btn btn-primary">Last 6 Months</button>
            <button id="lastTwelveMonths" type="button" class="btn btn-primary">Last 12 Months</button>
        </div>
    </div>
  </div>
</div>
<div id="canvasParent" style="width: 70%; margin:0 auto;">
    <canvas id="canvas"></canvas>
</div>
<script>
    var userNames = @Html.Raw(UserNames);
    var chartData = @Html.Raw(ChartData);
    var currentType = 'bar';
    $(document).ready(function () {
        thisMonthFunc();
    });
    var MONTHS = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];

    var randomScalingFactor = function () {
        return Math.round(Math.random() * 100);
        //return 0;
    };
    var randomColorFactor = function () {
        return Math.round(Math.random() * 255);
    };
    var randomColor = function (opacity) {
        return 'rgba(' + randomColorFactor() + ',' + randomColorFactor() + ',' + randomColorFactor() + ',' + (opacity || '.3') + ')';
    };

    var config = {
        type: 'bar',
        data: {
            labels: [],
            datasets: []
        },
        options: {
            scales: {
                xAxes: [{
                    stacked: true,
                    gridLines: {
                        display: false
                    }
                }],
                yAxes: [{
                    stacked: true
                }]
            }
        }
    };
    var config2 = {
        type: 'line',
        data: {
            labels: [],
            datasets: []
        }
    };
    var config3 = {
        type: 'radar',
        borderWidth: 0.1,
        data: {
            labels: [],
            datasets: []
        },
    };

    config.data.datasets.forEach(function (dataset) {
        dataset.borderColor = randomColor(0.4);
        dataset.backgroundColor = randomColor(0.5);
        dataset.pointBorderColor = randomColor(0.7);
        dataset.pointBackgroundColor = randomColor(0.5);
        dataset.pointBorderWidth = 1;
    });

    var ctx = document.getElementById("canvas").getContext("2d");
    myChart = new Chart(ctx, config);

    var removeAllDataSets = function () {
        config.data.datasets.splice(0, config.data.datasets.length);
        myChart.update();
    };

    var removeAllData = function () {
        config.data.labels.splice(0, config.data.labels.length); // remove the label first
        for (var i = 0; i < config.data.labels.length; i++) {
            dataset.data.pop();
        }

        myChart.update();
    };

    function daysInMonthFunc(month, year) {
        return new Date(year, month, 0).getDate();
    }
    function thisMonthFunc() {
        removeAllDataSets();
        removeAllData();
        var d = new Date();
        var n = d.getMonth();
        var c = d.getDay();
        for (var i = 0; i < userNames.length; i++) {
            var newDataset = {
                label: userNames[i],
                borderColor: randomColor(0.4),
                backgroundColor: randomColor(0.5),
                pointBorderColor: randomColor(0.7),
                pointBackgroundColor: randomColor(0.5),
                pointBorderWidth: 1,
                data: new Array(c).fill(0), // 0-array of length c (set to null if you don't want points on the x-axis)
                hidden: false, //false: show data on load.
            };
            for (var j = 0; j < chartData.length; ++j) {
                if (chartData[j].Item3 == userNames[i] && chartData[j].Item2 == MONTHS[n] && chartData[j].Item4 <= c) {
                    var test = chartData[j].Item4;
                    newDataset.data[test - 1] += chartData[j].Item1;
                }
            }
            config.data.datasets.push(newDataset);
        }

        // Add labels for the first c days of this month
        for (var j = 1; j <= c; j++) {
            config.data.labels.push(j + " " + MONTHS[n]);
        }

        //Show chart.
        change(currentType);
    }

    $('#thisMonth').click(function ()
    {
        thisMonthFunc();
    });

    $('#lastMonth').click(function () {
        removeAllDataSets();
        removeAllData();
        var d = new Date();
        var n = d.getMonth() - 1;
        var c = daysInMonthFunc(n + 1, d.getFullYear());
        for (var i = 0; i < userNames.length; i++) {
            var newDataset = {
                label: userNames[i],
                borderColor: randomColor(0.4),
                backgroundColor: randomColor(0.5),
                pointBorderColor: randomColor(0.7),
                pointBackgroundColor: randomColor(0.5),
                pointBorderWidth: 1,
                data: new Array(c).fill(0), // 0-array of length c (set to null if you don't want points on the x-axis)
                hidden: false, //false: show data on load.
            };
            for (var j = 0; j < chartData.length; ++j) {
                if (chartData[j].Item3 == userNames[i] && chartData[j].Item2 == MONTHS[n] && chartData[j].Item4 <= c) {
                    var test = chartData[j].Item4;
                    newDataset.data[test - 1] += chartData[j].Item1;
                }
            }
            config.data.datasets.push(newDataset);
        }

        // Add labels for the first c days of this month
        for (var j = 1; j <= c; j++) {
            config.data.labels.push(j + " " + MONTHS[n]);
        }

        //Show chart.
        change(currentType);
    });

    $("#line").click(function () {
        $('#canvasParent').width('70%')
        change("line");
    });
    $("#bar").click(function () {
        $('#canvasParent').width('70%')
        change("bar");
    });
    $("#radar").click(function () {
        $('#canvasParent').width( '35%' )
        change("radar");
    });

    function change(newType) {
        // Remove the old chart and all its event handlers
        myChart.destroy();

        if (newType == 'bar') {
            config.type = newType;
            myChart = new Chart(ctx, config);
        }
        if (newType == 'line') {
            config2.data.datasets = config.data.datasets;
            config2.data.labels = config.data.labels;
            myChart = new Chart(ctx, config2);
        }
        if (newType == 'radar') {
            config3.data.datasets = config.data.datasets;
            config3.data.labels = config.data.labels;
            myChart = new Chart(ctx, config3);
        }
        currentType = newType;
    };
</script>
