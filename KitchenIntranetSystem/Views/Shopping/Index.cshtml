@model IEnumerable<KitchenIntranetSystem.Models.Shopping>
@{
    ViewData["Title"] = "Index";
    var UserNames = ViewBag.UserNames;
    var ChartData = ViewBag.ChartData;
}

<script src="~/js/moment.js"></script>
<script src="~/js/Chart.min.js"></script>
<script src="~/js/utils.js"></script>
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>
<h2>Index</h2>

<p>
    <a asp-action="Create">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
                <th>
                    @Html.DisplayNameFor(model => model.ItemBought)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Price)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Date)
                </th>
            <th>
                @Html.DisplayNameFor(model => model.User)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.ItemBought)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Price)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Date)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.User.FirstName) @Html.DisplayFor(modelItem => item.User.LastName)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table>

<div class="container">
  <div class="row">
    <div class="col-md-12">
        <div class="btn btn-group">
            <button type="button" class="btn btn-primary">Line</button>
            <button type="button" class="btn btn-primary">Bar</button>
            <button type="button" class="btn btn-primary">Radar</button>
        </div>
        <div class="btn btn-group">
            <button id="thisMonth" type="button" class="btn btn-primary">This Month</button>
            <button id="lastMonth" type="button" class="btn btn-primary">Last Month</button>
            <button id="lastThreeMonths" type="button" class="btn btn-primary">Last 3 Months</button>
            <button id="lastSixMonths" type="button" class="btn btn-primary">Last 6 Months</button>
            <button id="lastTwelveMonths" type="button" class="btn btn-primary">Last 12 Months</button>
        </div>
  </div>
</div>
<div class="col-md-12">
    <canvas id="canvas"></canvas>
<button id="addDataset">Add Dataset</button>
<button id="removeDataset">Remove Dataset</button>
<button id="addData">Add Data</button>
<button id="removeData">Remove Data</button>
</div>
<script>
    var userNames = @Html.Raw(UserNames);
    var chartData = @Html.Raw(ChartData);

    var MONTHS = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];

    var randomScalingFactor = function () {
        return Math.round(Math.random() * 100);
        //return 0;
    };
    var randomColorFactor = function () {
        return Math.round(Math.random() * 255);
    };
    var randomColor = function (opacity) {
        return 'rgba(' + randomColorFactor() + ',' + randomColorFactor() + ',' + randomColorFactor() + ',' + (opacity || '.3') + ')';
    };

    var config = {
        type: 'line',
        data: {
            labels: [],
            datasets: []
        },
        options: {
            responsive: true,
            title: {
                display: true,
                text: 'Shopping Data'
            },
            scales: {
                xAxes: [{
                    display: true,
                    scaleLabel: {
                        show: true,
                        labelString: 'Month'
                    }
                }],
                yAxes: [{
                    display: true,
                    scaleLabel: {
                        show: true,
                        labelString: 'Value'
                    }
                }]
            }
        }
    };

    config.data.datasets.forEach(function (dataset) {
        dataset.borderColor = randomColor(0.4);
        dataset.backgroundColor = randomColor(0.5);
        dataset.pointBorderColor = randomColor(0.7);
        dataset.pointBackgroundColor = randomColor(0.5);
        dataset.pointBorderWidth = 1;
    });

    var ctx = document.getElementById("canvas").getContext("2d");
    window.myLine = new Chart(ctx, config);

    document.getElementById('addDataset').onclick = function () {
        var newDataset = {
            label: 'Dataset ' + config.data.datasets.length,
            borderColor: randomColor(0.4),
            backgroundColor: randomColor(0.5),
            pointBorderColor: randomColor(0.7),
            pointBackgroundColor: randomColor(0.5),
            pointBorderWidth: 1,
            data: [],
        };

        if (config.data.labels) {
            for (var index = 0; index < config.data.labels.length; ++index) {
                newDataset.data.push(randomScalingFactor());
            }
        }

        config.data.datasets.push(newDataset);
        window.myLine.update();
    };

    document.getElementById('addData').onclick = function () {
        if (config.data.datasets.length > 0) {
            var month = MONTHS[config.data.labels.length % MONTHS.length];
            config.data.labels.push(month);

            config.data.datasets.forEach(function (dataset) {
                dataset.data.push(randomScalingFactor());
            });

            window.myLine.update();
        }
    };

    var removeAllDataSets = function () {
        config.data.datasets.splice(0, config.data.datasets.length);
        window.myLine.update();
    };

    var removeAllData = function () {
        config.data.labels.splice(0, config.data.labels.length); // remove the label first
        for (var i = 0; i < config.data.labels.length; i++) {
            dataset.data.pop();
        }

        window.myLine.update();
    };

    function daysInMonthFunc(month, year) {
        return new Date(year, month, 0).getDate();
    }

    document.getElementById('removeDataset').onclick = function () {
        config.data.datasets.splice(0, 1);
        window.myLine.update();
    };

    document.getElementById('removeData').onclick = function () {
        config.data.labels.splice(-1, 1); // remove the label first

        config.data.datasets.forEach(function (dataset, datasetIndex) {
            dataset.data.pop();
        });

        window.myLine.update();
    };

    // ---------------- MY OWN SHIT ------------------------------------
    $('#thisMonth').click(function ()
    {
        removeAllDataSets();
        removeAllData();
        var d = new Date();
        var n = d.getMonth();
        var c = d.getDay();
        debugger;
        for (var i = 0; i < userNames.length; i++) {
            var newDataset = {
                label: userNames[i],
                borderColor: randomColor(0.4),
                backgroundColor: randomColor(0.5),
                pointBorderColor: randomColor(0.7),
                pointBackgroundColor: randomColor(0.5),
                pointBorderWidth: 1,
                data: new Array(c).fill(0), // 0-array of length c (set to null if you don't want points on the x-axis)
                hidden: false, //false: show data on load.
            };
            for (var j = 0; j < chartData.length; ++j) {
                if (chartData[j].Item3 == userNames[i] && chartData[j].Item2 == MONTHS[n] && chartData[j].Item4 <= c) {
                    var test = chartData[j].Item4;
                    newDataset.data[test-1] += chartData[j].Item1;
                }
            }
            config.data.datasets.push(newDataset);
        }

        // Add labels for the first c days of this month
        for (var j = 1; j <= c; j++) {
            config.data.labels.push(j + " " + MONTHS[n]);
        }

        //Show chart.
        window.myLine.update();
    });

    $('#lastMonth').click(function () {
        removeAllDataSets();
        removeAllData();
        var d = new Date();
        var n = d.getMonth()-1;
        var c = 31;
        debugger;
        for (var i = 0; i < userNames.length; i++) {
            var newDataset = {
                label: userNames[i],
                borderColor: randomColor(0.4),
                backgroundColor: randomColor(0.5),
                pointBorderColor: randomColor(0.7),
                pointBackgroundColor: randomColor(0.5),
                pointBorderWidth: 1,
                data: new Array(c).fill(0), // 0-array of length c (set to null if you don't want points on the x-axis)
                hidden: false, //false: show data on load.
            };
            for (var j = 0; j < chartData.length; ++j) {
                if (chartData[j].Item3 == userNames[i] && chartData[j].Item2 == MONTHS[n] && chartData[j].Item4 <= c) {
                    var test = chartData[j].Item4;
                    newDataset.data[test - 1] += chartData[j].Item1;
                }
            }
            config.data.datasets.push(newDataset);
        }

        // Add labels for the first c days of this month
        for (var j = 1; j <= c; j++) {
            config.data.labels.push(j + " " + MONTHS[n]);
        }

        //Show chart.
        window.myLine.update();
    });

    function change(newType) {
        var ctx = document.getElementById("canvas").getContext("2d");

        // Remove the old chart and all its event handles
        if (window.myLine) {
            window.myLine.destroy();
        }

        // Chart.js modifies the object you pass in. Pass a copy of the object so we can use the original object later
        var temp = jQuery.extend(true, {}, config);
        temp.type = newType;
        window.myLine = new Chart(ctx, temp);
    };
</script>
